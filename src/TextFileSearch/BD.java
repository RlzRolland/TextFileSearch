/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package TextFileSearch;

import java.awt.Color;
import java.awt.Font;
import java.awt.event.KeyEvent;
import java.io.BufferedReader;
import java.io.BufferedWriter;
import java.io.File;
import java.io.FileInputStream;
import java.io.FileWriter;
import java.io.InputStreamReader;
import javax.swing.DefaultComboBoxModel;
import javax.swing.Icon;
import javax.swing.ImageIcon;
import javax.swing.JButton;
import javax.swing.JCheckBox;
import javax.swing.JComboBox;
import javax.swing.JFileChooser;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.JTextField;
import javax.swing.RowFilter;
import javax.swing.border.TitledBorder;
import javax.swing.filechooser.FileFilter;
import javax.swing.filechooser.FileNameExtensionFilter;
import javax.swing.table.DefaultTableModel;
import javax.swing.table.JTableHeader;
import javax.swing.table.TableColumn;
import javax.swing.table.TableRowSorter;
import java.nio.file.Files;
import javax.swing.DefaultListModel;

/**
 *
 * @author RlzRolland
 */
public class BD extends javax.swing.JPanel {

    DefaultTableModel dft_datos;
    DefaultListModel columnas;
    TableRowSorter trs;

    String[] idiomas = {"Español", "English"};
    String[] archivos = {".txt", ".csv"};
    public static int cont = 0;
    public static String idiomaGuardado = "";
    Icon iconito = new ImageIcon(getClass().getResource("mensaje.png"));
    String[] opciones = {"Si / Yes", "No"};
    boolean fuera = false;
    OpcionesBD opBD = new OpcionesBD();
    OpcionesBD1 opBD1 = new OpcionesBD1();
    String[] colum = {"Mostrar / Show", "Eliminar / Remove"};
    boolean opcion = false;
    int valors = 0;
    String[] arreglado = new String[100];

    /**
     * Creates new form BD
     */
    public BD() {
        initComponents();

        cont++;
        this.setBackground(new Color(109, 192, 214));
        jPCargas.setBackground(new Color(255, 255, 255, 0));
        jPArchivo.setBackground(new Color(255, 255, 255, 0));
        jPBuscar.setBackground(new Color(255, 255, 255, 0));
        jPEspecifica.setBackground(new Color(255, 255, 255, 0));
        jPEloMo.setBackground(new Color(255, 255, 255, 0));
        jPActual.setBackground(new Color(255, 255, 255, 0));
        jPTablas.setBackground(new Color(255, 255, 255, 0));
        jPOtra.setBackground(new Color(255, 255, 255, 0));

        if (cont <= 1) {
            String texto = "<html><body>BIENVENIDOS AL SISTEMA (TextFileSearch). <br>POR FAVOR PARA EMPEZAR A UTILIZARLO PRIMERO SELECCIONE UN IDIOMA /<br><br>"
                    + "WELCOME TO THE SYSTEM (TextFileSearch). <br>PLEASE TO START USING IT FIRST SELECT A LANGUAGE<br></body></html>";
            JLabel label = new JLabel(texto);
            label.setFont(new Font("Arial", Font.BOLD, 14));

            Icon iconito2 = new ImageIcon(getClass().getResource("database-search.png"));
            int y = JOptionPane.showOptionDialog(null, label,
                    "Seleccionar Idioma / Choose Language",
                    JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, iconito2, idiomas, idiomas[0]);
            if (y == 0) {
                CargarIdioma("Espanol");
                idiomaGuardado = "Espanol";
            } else if (y == 1) {
                CargarIdioma("English");
                idiomaGuardado = "English";
            } else {
                System.exit(0);
            }
        }

        CargarIdioma(idiomaGuardado);

        jLblOriginal.setHorizontalAlignment(JLabel.CENTER);
        jLblModificado.setHorizontalAlignment(JLabel.CENTER);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPCargas = new javax.swing.JPanel();
        jCBCBDD = new javax.swing.JComboBox<>();
        jBtnCargar = new javax.swing.JButton();
        jPArchivo = new javax.swing.JPanel();
        jTxfResultados = new javax.swing.JTextField();
        jBtnArchivo = new javax.swing.JButton();
        jPBuscar = new javax.swing.JPanel();
        jBusCompleta = new javax.swing.JTextField();
        jbFiltrar = new javax.swing.JButton();
        jPEspecifica = new javax.swing.JPanel();
        jLblBusqueda = new javax.swing.JLabel();
        jTxfBusqueda = new javax.swing.JTextField();
        jbFiltrar10 = new javax.swing.JButton();
        jCBCColumna = new javax.swing.JButton();
        jPEloMo = new javax.swing.JPanel();
        jCbcMostrar = new javax.swing.JCheckBox();
        jCbcEliminar = new javax.swing.JCheckBox();
        jTxfSelCol = new javax.swing.JButton();
        jPActual = new javax.swing.JPanel();
        jBtnCerrar = new javax.swing.JButton();
        jLblOriginal = new javax.swing.JLabel();
        jPTablas = new javax.swing.JPanel();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTModificado = new javax.swing.JTable();
        jLblModificado = new javax.swing.JLabel();
        jPOtra = new javax.swing.JPanel();
        jScrollPane2 = new javax.swing.JScrollPane();
        jTOriginal = new javax.swing.JTable();

        jCBCBDD.setEnabled(false);
        jCBCBDD.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBCBDDActionPerformed(evt);
            }
        });

        jBtnCargar.setBackground(new java.awt.Color(51, 255, 51));
        jBtnCargar.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jBtnCargar.setForeground(new java.awt.Color(0, 51, 255));
        jBtnCargar.setText("Cargar Archivo");
        jBtnCargar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCargarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPCargasLayout = new javax.swing.GroupLayout(jPCargas);
        jPCargas.setLayout(jPCargasLayout);
        jPCargasLayout.setHorizontalGroup(
            jPCargasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCargasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCBCBDD, 0, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
            .addGroup(jPCargasLayout.createSequentialGroup()
                .addGap(52, 52, 52)
                .addComponent(jBtnCargar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(66, 66, 66))
        );
        jPCargasLayout.setVerticalGroup(
            jPCargasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPCargasLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCBCBDD, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnCargar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPArchivo.setBorder(javax.swing.BorderFactory.createTitledBorder("Elige el nombre para el archivo de anotación"));

        jTxfResultados.setEnabled(false);

        jBtnArchivo.setBackground(new java.awt.Color(204, 153, 255));
        jBtnArchivo.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jBtnArchivo.setForeground(new java.awt.Color(0, 0, 204));
        jBtnArchivo.setText("Convertir tabla en archivo de texto");
        jBtnArchivo.setEnabled(false);
        jBtnArchivo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnArchivoActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPArchivoLayout = new javax.swing.GroupLayout(jPArchivo);
        jPArchivo.setLayout(jPArchivoLayout);
        jPArchivoLayout.setHorizontalGroup(
            jPArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPArchivoLayout.createSequentialGroup()
                .addGap(46, 46, 46)
                .addComponent(jBtnArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, 317, Short.MAX_VALUE)
                .addGap(52, 52, 52))
            .addGroup(jPArchivoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTxfResultados)
                .addContainerGap())
        );
        jPArchivoLayout.setVerticalGroup(
            jPArchivoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPArchivoLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jTxfResultados, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jBtnArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );

        jPBuscar.setBorder(javax.swing.BorderFactory.createTitledBorder("Buscar en toda la BD"));

        jBusCompleta.setEditable(false);
        jBusCompleta.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jBusCompletaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jBusCompletaKeyTyped(evt);
            }
        });

        jbFiltrar.setBackground(new java.awt.Color(255, 153, 153));
        jbFiltrar.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jbFiltrar.setText("Filtrar");
        jbFiltrar.setEnabled(false);
        jbFiltrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFiltrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPBuscarLayout = new javax.swing.GroupLayout(jPBuscar);
        jPBuscar.setLayout(jPBuscarLayout);
        jPBuscarLayout.setHorizontalGroup(
            jPBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPBuscarLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jBusCompleta)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jbFiltrar))
        );
        jPBuscarLayout.setVerticalGroup(
            jPBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPBuscarLayout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPBuscarLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBusCompleta, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbFiltrar))
                .addGap(30, 30, 30))
        );

        jPEspecifica.setBorder(javax.swing.BorderFactory.createTitledBorder("Búsqueda específica"));

        jLblBusqueda.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLblBusqueda.setText("Ingrese su búsqueda:");

        jTxfBusqueda.setEditable(false);
        jTxfBusqueda.addKeyListener(new java.awt.event.KeyAdapter() {
            public void keyPressed(java.awt.event.KeyEvent evt) {
                jTxfBusquedaKeyPressed(evt);
            }
            public void keyTyped(java.awt.event.KeyEvent evt) {
                jTxfBusquedaKeyTyped(evt);
            }
        });

        jbFiltrar10.setBackground(new java.awt.Color(255, 153, 153));
        jbFiltrar10.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jbFiltrar10.setText("Filtrar");
        jbFiltrar10.setEnabled(false);
        jbFiltrar10.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jbFiltrar10ActionPerformed(evt);
            }
        });

        jCBCColumna.setBackground(new java.awt.Color(255, 102, 102));
        jCBCColumna.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jCBCColumna.setForeground(new java.awt.Color(51, 51, 51));
        jCBCColumna.setText("Seleccionar columnas");
        jCBCColumna.setEnabled(false);
        jCBCColumna.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCBCColumnaActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPEspecificaLayout = new javax.swing.GroupLayout(jPEspecifica);
        jPEspecifica.setLayout(jPEspecificaLayout);
        jPEspecificaLayout.setHorizontalGroup(
            jPEspecificaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPEspecificaLayout.createSequentialGroup()
                .addGroup(jPEspecificaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPEspecificaLayout.createSequentialGroup()
                        .addComponent(jLblBusqueda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jTxfBusqueda)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jbFiltrar10))
                    .addGroup(jPEspecificaLayout.createSequentialGroup()
                        .addContainerGap()
                        .addComponent(jCBCColumna, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)))
                .addContainerGap())
        );
        jPEspecificaLayout.setVerticalGroup(
            jPEspecificaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPEspecificaLayout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jCBCColumna)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPEspecificaLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLblBusqueda)
                    .addComponent(jTxfBusqueda, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jbFiltrar10))
                .addGap(0, 0, Short.MAX_VALUE))
        );

        jPEloMo.setBorder(javax.swing.BorderFactory.createTitledBorder("Mostrar / Eliminar Columnas"));

        jCbcMostrar.setText("Mostrar");
        jCbcMostrar.setEnabled(false);
        jCbcMostrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbcMostrarActionPerformed(evt);
            }
        });

        jCbcEliminar.setText("Eliminar");
        jCbcEliminar.setEnabled(false);
        jCbcEliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jCbcEliminarActionPerformed(evt);
            }
        });

        jTxfSelCol.setBackground(new java.awt.Color(255, 102, 102));
        jTxfSelCol.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jTxfSelCol.setForeground(new java.awt.Color(51, 51, 51));
        jTxfSelCol.setText("Seleccionar columnas");
        jTxfSelCol.setEnabled(false);
        jTxfSelCol.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jTxfSelColActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPEloMoLayout = new javax.swing.GroupLayout(jPEloMo);
        jPEloMo.setLayout(jPEloMoLayout);
        jPEloMoLayout.setHorizontalGroup(
            jPEloMoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPEloMoLayout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(jPEloMoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPEloMoLayout.createSequentialGroup()
                        .addComponent(jCbcMostrar, javax.swing.GroupLayout.PREFERRED_SIZE, 77, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(jCbcEliminar, javax.swing.GroupLayout.PREFERRED_SIZE, 79, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPEloMoLayout.createSequentialGroup()
                        .addComponent(jTxfSelCol, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())))
        );
        jPEloMoLayout.setVerticalGroup(
            jPEloMoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPEloMoLayout.createSequentialGroup()
                .addContainerGap(15, Short.MAX_VALUE)
                .addComponent(jTxfSelCol)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(jPEloMoLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jCbcMostrar)
                    .addComponent(jCbcEliminar))
                .addContainerGap())
        );

        jBtnCerrar.setBackground(new java.awt.Color(0, 204, 204));
        jBtnCerrar.setFont(new java.awt.Font("Tahoma", 1, 13)); // NOI18N
        jBtnCerrar.setForeground(new java.awt.Color(0, 51, 255));
        jBtnCerrar.setText("Cerrar BD Actual");
        jBtnCerrar.setEnabled(false);
        jBtnCerrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBtnCerrarActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPActualLayout = new javax.swing.GroupLayout(jPActual);
        jPActual.setLayout(jPActualLayout);
        jPActualLayout.setHorizontalGroup(
            jPActualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPActualLayout.createSequentialGroup()
                .addGap(0, 0, 0)
                .addComponent(jBtnCerrar, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPActualLayout.setVerticalGroup(
            jPActualLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jBtnCerrar, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );

        jLblOriginal.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblOriginal.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLblOriginal.setText("DATOS ORIGINALES DE LA BASE DE DATOS");

        jTModificado = new javax.swing.JTable() {
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        jTModificado.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTModificado.getTableHeader().setReorderingAllowed(false);
        jScrollPane1.setViewportView(jTModificado);

        javax.swing.GroupLayout jPTablasLayout = new javax.swing.GroupLayout(jPTablas);
        jPTablas.setLayout(jPTablasLayout);
        jPTablasLayout.setHorizontalGroup(
            jPTablasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTablasLayout.createSequentialGroup()
                .addComponent(jScrollPane1)
                .addContainerGap())
        );
        jPTablasLayout.setVerticalGroup(
            jPTablasLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPTablasLayout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.DEFAULT_SIZE, 172, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        jLblModificado.setFont(new java.awt.Font("Tahoma", 1, 14)); // NOI18N
        jLblModificado.setHorizontalAlignment(javax.swing.SwingConstants.LEFT);
        jLblModificado.setText("DATOS DISPONIBLES A SER MODIFICADOS");

        jTOriginal = new javax.swing.JTable() {
            public boolean isCellEditable(int rowIndex, int colIndex) {
                return false;
            }
        };
        jTOriginal.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTOriginal.getTableHeader().setReorderingAllowed(false);
        jScrollPane2.setViewportView(jTOriginal);

        javax.swing.GroupLayout jPOtraLayout = new javax.swing.GroupLayout(jPOtra);
        jPOtra.setLayout(jPOtraLayout);
        jPOtraLayout.setHorizontalGroup(
            jPOtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane2)
        );
        jPOtraLayout.setVerticalGroup(
            jPOtraLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPOtraLayout.createSequentialGroup()
                .addComponent(jScrollPane2, javax.swing.GroupLayout.DEFAULT_SIZE, 160, Short.MAX_VALUE)
                .addGap(0, 0, 0))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(this);
        this.setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(303, 303, 303)
                .addComponent(jLblOriginal, javax.swing.GroupLayout.DEFAULT_SIZE, 350, Short.MAX_VALUE)
                .addGap(389, 389, 389))
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPOtra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addContainerGap())
                    .addComponent(jPTablas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jPBuscar, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPCargas, javax.swing.GroupLayout.Alignment.LEADING, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPEspecifica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addComponent(jPArchivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                            .addComponent(jPEloMo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                        .addGap(174, 174, 174))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addGap(155, 155, 155)
                        .addComponent(jLblModificado, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                        .addGap(384, 384, 384))))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jPArchivo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jPCargas, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jPBuscar, javax.swing.GroupLayout.PREFERRED_SIZE, 73, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jPEspecifica, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jPEloMo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jPActual, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLblModificado, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPTablas, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGap(11, 11, 11)
                .addComponent(jLblOriginal, javax.swing.GroupLayout.PREFERRED_SIZE, 17, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jPOtra, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addContainerGap())
        );
    }// </editor-fold>//GEN-END:initComponents

    public void CargarIdioma(String idioma) {
        Propiedades propiedades = new Propiedades(idioma);
        jBtnCargar.setText(propiedades.getProperty("Cargar"));
        TitledBorder border10 = new TitledBorder(propiedades.getProperty("Anotacion"));
        border10.setTitleJustification(TitledBorder.LEFT);
        border10.setTitlePosition(TitledBorder.TOP);
        jPArchivo.setBorder(border10);
        jBtnArchivo.setText(propiedades.getProperty("Tabla"));
        TitledBorder borde = new TitledBorder(propiedades.getProperty("Toda"));
        borde.setTitleJustification(TitledBorder.LEFT);
        borde.setTitlePosition(TitledBorder.TOP);
        jPBuscar.setBorder(borde);
        TitledBorder border = new TitledBorder(propiedades.getProperty("Especifica"));
        border.setTitleJustification(TitledBorder.LEFT);
        border.setTitlePosition(TitledBorder.TOP);
        jPEspecifica.setBorder(border);
        jCBCColumna.setText(propiedades.getProperty("Columna"));
        jLblBusqueda.setText(propiedades.getProperty("Busqueda"));
        TitledBorder border2 = new TitledBorder(propiedades.getProperty("MosEl"));
        border2.setTitleJustification(TitledBorder.LEFT);
        border2.setTitlePosition(TitledBorder.TOP);
        jPEloMo.setBorder(border2);
        jTxfSelCol.setText(propiedades.getProperty("Columna"));
        jCbcEliminar.setText(propiedades.getProperty("Eliminar"));
        jCbcMostrar.setText(propiedades.getProperty("Mostrar"));
        jBtnCerrar.setText(propiedades.getProperty("Cerrar"));
        jLblModificado.setText(propiedades.getProperty("Modificado"));
        jLblOriginal.setText(propiedades.getProperty("Original"));
        jbFiltrar.setText(propiedades.getProperty("Filtrar"));
        jbFiltrar10.setText(propiedades.getProperty("Filtrar"));
        opBD.jButton1.setText(propiedades.getProperty("Seleccionar"));
        opBD1.jButton1.setText(propiedades.getProperty("Seleccionar"));
    }

    public void CargarArchivos(JComboBox j, JTextField j1, JTextField j2, JButton jcom2, JButton btn, JButton btn2, JCheckBox jcb1, JCheckBox jcb2,
            JButton jcom, JButton fil1, JButton fil2) {
        try {
            JFileChooser elegir = new JFileChooser();
            elegir.setApproveButtonText("Abrir Archivo / Open File");
            FileFilter filtro = new FileNameExtensionFilter("Archivos de Texto / Text files (.txt, .csv)", "txt", "csv");
            elegir.setFileFilter(filtro);
            int valor = elegir.showOpenDialog(elegir);
            if (valor == JFileChooser.APPROVE_OPTION) {
                File archiv = elegir.getSelectedFile();
                if (((DefaultComboBoxModel) j.getModel()).getIndexOf(archiv.toString()) == -1) {
                    String filename = archiv.toString();
                    File superfile = new File(filename);

                    byte[] filebytes = Files.readAllBytes(superfile.toPath());
                    char singlechar;
                    boolean flag = false;

                    for (byte b : filebytes) {
                        singlechar = (char) b;
                        if (singlechar == '\t') {
                            flag = true;
                            break;
                        }
                    }

                    if (flag) {
                        j.setToolTipText(archiv.toString());
                        j.addItem(archiv.getName());
                        j.setEnabled(true);
                        j1.setEditable(true);
                        j2.setEditable(true);
                        jcom2.setEnabled(true);
                        btn.setEnabled(true);
                        btn2.setEnabled(true);
                        jcb1.setEnabled(true);
                        jcb2.setEnabled(true);
                        jcom.setEnabled(true);
                        fil1.setEnabled(true);
                        fil2.setEnabled(true);
                        j1.setText("");
                        j2.setText("");
                    } else {
                        JOptionPane.showMessageDialog(null, "El archivo tiene que estar delimitado por tabs / The file has to be delimited by tabs");
                    }
                } else {
                    JOptionPane.showMessageDialog(null, "El archivo que ingreso ya existe / The file you entered already exists");
                }
            } else {
                JOptionPane.showMessageDialog(null, "La BD no fue abierta / The DB was not opened");
            }
        } catch (Exception ms) {
            JOptionPane.showMessageDialog(null, "La BD no fue abierta / The DB was not opened");
        }
    }

    public void ConvertirArchivoTexto(JTextField jtfR, JTable jtM, JComboBox o, JTextField j1, JTextField j2, JButton o2, JButton btn,
            JButton btn2, JButton o1, JCheckBox jcb1, JCheckBox jcb2, JButton btn3, JButton btn4) {
        int valor1 = 0, valor2 = 0, valor3 = 0, valor4 = 0;
        if (JOptionPane.showConfirmDialog(null, "Una vez convertido el archivo, la tabla volvera a su estado original,\n ¿estás seguro de continuar? / \nOnce the file is converted, the table will return to its original state, \nare you sure to continue?",
                "ADVERTENCIA / WARNING", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            try {
                for (int y = 0; y < jtM.getColumnModel().getColumnCount(); y++) {
                    if (jtM.getColumnModel().getColumn(y).getWidth() == 0) {
                        jtM.removeColumn(jtM.getColumnModel().getColumn(y));
                    }
                }

                int y = JOptionPane.showOptionDialog(null, "Elija la extensión en la que se guardará el archivo / Choose the extension in which the file will be saved",
                        "Guardar Archivo / Save File",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, iconito, archivos, archivos[0]);
                if (y == 0) {
                    JFileChooser elegir = new JFileChooser();
                    elegir.setApproveButtonText("Guardar Archivo / Save File");
                    FileFilter filtro = new FileNameExtensionFilter("Archivos de Texto / Text files (.txt)", "txt");
                    elegir.setFileFilter(filtro);
                    int valor = elegir.showOpenDialog(elegir);
                    if (valor == JFileChooser.APPROVE_OPTION) {
                        File archivo = new File(elegir.getSelectedFile() + ".txt");
                        jtfR.setText(archivo.toString());
                        try {
                            if (archivo.exists()) {
                                if (JOptionPane.showConfirmDialog(null, "El archivo que intenta crear ya existe, ¿Desea remplazarlo?  / \n The file you are trying to create already exists, Do you want to replace it?",
                                        "Guardar como / Save As", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                                    FileWriter fw = new FileWriter(archivo.getAbsoluteFile());
                                    BufferedWriter bw = new BufferedWriter(fw);

                                    for (int x = 0; x < jtM.getColumnModel().getColumnCount(); x++) {
                                        bw.write(jtM.getColumnName(x) + "\t");
                                    }
                                    bw.write("\n");

                                    for (int i = 0; i < jtM.getRowCount(); i++) {
                                        for (int j = 0; j < jtM.getColumnModel().getColumnCount(); j++) {
                                            bw.write(jtM.getModel().getValueAt(jtM.convertRowIndexToModel(i), jtM.convertColumnIndexToModel(j)) + "\t");
                                        }
                                        bw.write("\n");
                                    }
                                    bw.close();
                                    fw.close();
                                    JOptionPane.showMessageDialog(null, "Archivo guardado con exito / File saved successfully");
                                } else {
                                    valor1 = 1;
                                }
                            } else {
                                FileWriter fw = new FileWriter(archivo.getAbsoluteFile());
                                BufferedWriter bw = new BufferedWriter(fw);

                                for (int x = 0; x < jtM.getColumnCount(); x++) {
                                    bw.write(jtM.getColumnName(x) + "\t");
                                }
                                bw.write("\n");

                                for (int i = 0; i < jtM.getRowCount(); i++) {
                                    for (int j = 0; j < jtM.getColumnCount(); j++) {
                                        bw.write(jtM.getModel().getValueAt(jtM.convertRowIndexToModel(i), jtM.convertColumnIndexToModel(j)) + "\t");
                                    }
                                    bw.write("\n");
                                }
                                bw.close();
                                fw.close();
                                JOptionPane.showMessageDialog(null, "Archivo guardado con exito / File saved successfully");
                            }
                        } catch (Exception ms) {
                            ms.printStackTrace();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo crear el archivo / The file could not be created");
                        valor2 = 1;
                    }
                }
                if (y == 1) {
                    JFileChooser elegir = new JFileChooser();
                    elegir.setApproveButtonText("Guardar Archivo / Save File");
                    FileFilter filtro = new FileNameExtensionFilter("Archivos de Texto / Text files (.csv)", "csv");
                    elegir.setFileFilter(filtro);
                    int valor = elegir.showOpenDialog(elegir);
                    if (valor == JFileChooser.APPROVE_OPTION) {
                        File archivo = new File(elegir.getSelectedFile() + ".csv");
                        jtfR.setText(archivo.toString());
                        try {
                            if (archivo.exists()) {
                                if (JOptionPane.showConfirmDialog(null, "El archivo que intenta crear ya existe, ¿Desea remplazarlo? / \n The file you are trying to create already exists, Do you want to replace it?",
                                        "Guardar como / Save As", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                                    FileWriter fw = new FileWriter(archivo.getAbsoluteFile());
                                    BufferedWriter bw = new BufferedWriter(fw);

                                    for (int x = 0; x < jtM.getColumnCount(); x++) {
                                        bw.write(jtM.getColumnName(x) + "\t");
                                    }
                                    bw.write("\n");

                                    for (int i = 0; i < jtM.getRowCount(); i++) {
                                        for (int j = 0; j < jtM.getColumnCount(); j++) {
                                            bw.write(jtM.getModel().getValueAt(jtM.convertRowIndexToModel(i), jtM.convertColumnIndexToModel(j)) + "\t");
                                        }
                                        bw.write("\n");
                                    }
                                    bw.close();
                                    fw.close();
                                    JOptionPane.showMessageDialog(null, "Archivo guardado con exito / File saved successfully");
                                } else {
                                    valor3 = 1;
                                }
                            } else {
                                FileWriter fw = new FileWriter(archivo.getAbsoluteFile());
                                BufferedWriter bw = new BufferedWriter(fw);

                                for (int x = 0; x < jtM.getColumnCount(); x++) {
                                    bw.write(jtM.getColumnName(x) + "\t");
                                }
                                bw.write("\n");

                                for (int i = 0; i < jtM.getRowCount(); i++) {
                                    for (int j = 0; j < jtM.getColumnCount(); j++) {
                                        bw.write(jtM.getModel().getValueAt(jtM.convertRowIndexToModel(i), jtM.convertColumnIndexToModel(j)) + "\t");
                                    }
                                    bw.write("\n");
                                }
                                bw.close();
                                fw.close();
                                JOptionPane.showMessageDialog(null, "Archivo guardado con exito / File saved successfully");
                            }
                        } catch (Exception ms) {
                            ms.printStackTrace();
                        }
                    } else {
                        JOptionPane.showMessageDialog(null, "No se pudo crear el archivo / The file could not be created");
                        valor4 = 1;
                    }
                }

                if (y >= 0) {
                    if (valor1 != 1 && valor2 != 1 && valor3 != 1 && valor4 != 1) {
                        int index = o.getSelectedIndex();

                        for (int i = 0; i < jtM.getRowCount(); i++) {
                            ((DefaultTableModel) jtM.getModel()).removeRow(i);
                        }

                        if (JOptionPane.showConfirmDialog(null, "¿Quieres seguir trabajando con este archivo? / Do you want to continue working with this file?",
                                "ARCHIVO / FILE", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
                            String nombreBD = (String) o.getSelectedItem();
                            o.removeItemAt(index);
                            File archivo2 = new File(nombreBD);
                            o.addItem(archivo2.toString());
                        } else {
                            dft_datos.setColumnCount(0);
                            dft_datos.setRowCount(0);
                            o.removeItemAt(index);
                            if (o.getItemCount() == 0) {
                                j1.setEditable(false);
                                j2.setEditable(false);
                                o2.setEnabled(false);
                                btn.setEnabled(false);
                                btn2.setEnabled(false);
                                o.setEnabled(false);
                                o1.setEnabled(false);
                                jcb1.setEnabled(false);
                                jcb2.setEnabled(false);
                                btn3.setEnabled(false);
                                btn4.setEnabled(false);
                            }
                        }
                    }
                }
            } catch (Exception ms) {

            }
        } else {

        }
    }

    public void CerrarBD(JComboBox o, JTextField j1, JTextField j2, JButton jc2, JButton btn, JButton btn2,
            JButton jc1, JCheckBox jcb1, JCheckBox jcb2, JButton btn3, JButton btn4) {
        if (JOptionPane.showConfirmDialog(null, "¿Quiere cerrar esta BD? / Do you want to close this DB?",
                "ARCHIVO / FILE", JOptionPane.YES_NO_OPTION) == JOptionPane.YES_OPTION) {
            int index = o.getSelectedIndex();

            dft_datos.setColumnCount(0);
            dft_datos.setRowCount(0);
            o.removeItemAt(index);

            if (o.getItemCount() == 0) {
                j1.setEditable(false);
                j2.setEditable(false);
                jc2.setEnabled(false);
                btn.setEnabled(false);
                btn2.setEnabled(false);
                jc1.setEnabled(false);
                o.setEnabled(false);
                jcb1.setEnabled(false);
                jcb2.setEnabled(false);
                btn3.setEnabled(false);
                btn4.setEnabled(false);
            }
        } else {
        }
    }

    private void Filtro(String busqueda, JTable jt, TableRowSorter<DefaultTableModel> tr) {
        tr = new TableRowSorter(jt.getModel());
        jt.setRowSorter(tr);
        tr.setRowFilter(RowFilter.regexFilter("(?i)" + busqueda));
    }

    public void EliminarColumnas(JCheckBox EliminarCol, JTable jt) {
        try {
            if (EliminarCol.isSelected()) {
                if (jt.getColumnCount() != 0) {
                    for (int t = 0; t < opBD.tocados.length; t++) {
                        for (int j = 0; j < jt.getColumnCount(); j++) {
                            String cadena = jt.getColumnName(j);
                            if (cadena.startsWith(opBD.tocados[t])) {
                                jt.getColumnModel().getColumn(j).setMaxWidth(0);
                                jt.getColumnModel().getColumn(j).setMinWidth(0);
                                jt.getColumnModel().getColumn(j).setPreferredWidth(0);
                            }
                        }
                    }
                }
            }
            EliminarCol.setSelected(false);
        } catch (Exception ms) {
            //JOptionPane.showMessageDialog(null, "Antes de buscar debe ingresar su BD y seleccionar la columna a buscar");
        }
    }

    public void MostrarColumnas(JCheckBox MostrarCol, JTable jt) {
        try {
            if (MostrarCol.isSelected()) {
                if (jt.getColumnCount() != 0) {
                    for (int t = 0; t < opBD.tocados.length; t++) {
                        for (int j = 0; j < jt.getColumnCount(); j++) {
                            String cadena = jt.getColumnName(j);
                            if (cadena.startsWith(opBD.tocados[t])) {
                                jt.getColumnModel().getColumn(j).setMaxWidth(75);
                                jt.getColumnModel().getColumn(j).setMinWidth(75);
                                jt.getColumnModel().getColumn(j).setPreferredWidth(75);
                            }
                        }
                    }
                }
            }
            MostrarCol.setSelected(false);
        } catch (Exception ms) {
            //JOptionPane.showMessageDialog(null, "Antes de buscar debe ingresar su BD y seleccionar la columna a buscar");
        }
    }

    public void JTableHeaderColumnToolTips(JTable tabla) {
        JTableHeader tableHeader = tabla.getTableHeader();
        JTableColumnHeaderToolTips toolTips = new JTableColumnHeaderToolTips();
        for (int col = 0; col < tabla.getColumnCount(); col++) {
            TableColumn colIndice = tabla.getColumnModel().getColumn(col);
            toolTips.setHeaderColumnToolTip(colIndice, tabla.getColumnName(col));
        }
        tableHeader.addMouseMotionListener(toolTips);
    }

    private void jBtnCargarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCargarActionPerformed
        // TODO add your handling code here:
        CargarArchivos(jCBCBDD, jBusCompleta, jTxfBusqueda, jTxfSelCol, jBtnCerrar, jBtnArchivo, jCbcMostrar, jCbcEliminar,
                jCBCColumna, jbFiltrar, jbFiltrar10);
    }//GEN-LAST:event_jBtnCargarActionPerformed

    private void jBtnArchivoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnArchivoActionPerformed
        // TODO add your handling code here:
        ConvertirArchivoTexto(jTxfResultados, jTModificado, jCBCBDD, jBusCompleta, jTxfBusqueda, jTxfSelCol, jBtnCerrar, jBtnArchivo,
                jCBCColumna, jCbcMostrar, jCbcEliminar, jbFiltrar, jbFiltrar10);
    }//GEN-LAST:event_jBtnArchivoActionPerformed

    private void jbFiltrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFiltrarActionPerformed
        // TODO add your handling code here:
        try {
            if (jBusCompleta.getText().isEmpty()) {
                int i = JOptionPane.showOptionDialog(null, "¿Quieres mostrar de nuevo la tabla completa? / Do you want to show the whole table again?",
                        "Abrir Tabla / Open Table",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, iconito, opciones, opciones[0]);

                if (i == 0) {
                    Filtro("", jTModificado, trs);
                } else {
                }
            } else {
                String entrada = jBusCompleta.getText();
                entrada = entrada.replace(",", "|");
                Filtro(entrada, jTModificado, trs);
                TablaSubrayada renderer = new TablaSubrayada(jBusCompleta);
                jTModificado.setDefaultRenderer(Object.class, renderer);
            }
        } catch (Exception ms) {

        }
    }//GEN-LAST:event_jbFiltrarActionPerformed

    private void jbFiltrar10ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jbFiltrar10ActionPerformed
        // TODO add your handling code here:
        try {
            if (jTxfBusqueda.getText().isEmpty()) {
                int i = JOptionPane.showOptionDialog(null, "¿Quieres mostrar de nuevo la tabla completa? / Do you want to show the whole table again?",
                        "Abrir Tabla / Open Table",
                        JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, iconito, opciones, opciones[0]);

                if (i == 0) {
                    Filtro("", jTModificado, trs);
                } else {
                }
            } else {
                if (opBD1.tocados.length > 0) {
                    String entrada10 = jTxfBusqueda.getText();
                    entrada10 = entrada10.replace(",", "|");
                    Filtro(entrada10, jTModificado, trs);
                    TablaEspecial renderer10 = new TablaEspecial(jTxfBusqueda, opBD1.tocados, jTModificado);
                    jTModificado.setDefaultRenderer(Object.class, renderer10);
                }
            }
        } catch (Exception ms) {
            JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna columna / No columns selected");
        }
    }//GEN-LAST:event_jbFiltrar10ActionPerformed

    private void jCbcMostrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbcMostrarActionPerformed
        // TODO add your handling code here:
        MostrarColumnas(jCbcMostrar, jTModificado);
        jCbcMostrar.setSelected(false);
    }//GEN-LAST:event_jCbcMostrarActionPerformed

    private void jCbcEliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCbcEliminarActionPerformed
        // TODO add your handling code here:
        EliminarColumnas(jCbcEliminar, jTModificado);
        jCbcEliminar.setSelected(false);
    }//GEN-LAST:event_jCbcEliminarActionPerformed

    private void jCBCBDDActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBCBDDActionPerformed
        // TODO add your handling code here:
        try {
            dft_datos = new DefaultTableModel();
            columnas = new DefaultListModel();
            dft_datos.setColumnCount(0);
            dft_datos.setRowCount(0);

            for (int i = valors; i < jCBCBDD.getItemCount(); i++) {
                arreglado[i] = jCBCBDD.getToolTipText();
                valors++;
            }

            int ind = jCBCBDD.getSelectedIndex();
            jCBCBDD.setToolTipText(arreglado[ind]);
            FileInputStream fileInputStream = new FileInputStream(jCBCBDD.getToolTipText());
            InputStreamReader inputStreamReader = new InputStreamReader(fileInputStream, "UTF-8");
            int cantlineas = 0;
            boolean paso = false;

            try (BufferedReader bufferedreader = new BufferedReader(inputStreamReader)) {
                String linea;
                while ((linea = bufferedreader.readLine()) != null) {
                    String[] valores = linea.split("\t");
                    while (cantlineas < 1) {
                        for (int j = 0; j < valores.length; j++) {
                            columnas.addElement(valores[j]);
                            dft_datos.addColumn(valores[j]);
                        }
                        cantlineas++;
                        paso = true;
                    }
                    if (paso != true) {
                        dft_datos.addRow(linea.split("\t"));
                    }
                    paso = false;
                }
                jTModificado.setModel(dft_datos);
                jTOriginal.setModel(dft_datos);
                opBD.jList1.setModel(columnas);
                opBD1.jList1.setModel(columnas);
                jTxfBusqueda.setText("");
                jBusCompleta.setText("");
                JTableHeaderColumnToolTips(jTModificado);
                JTableHeaderColumnToolTips(jTOriginal);
                Filtro("", jTModificado, trs);
            }

        } catch (Exception ms) {

        }
    }//GEN-LAST:event_jCBCBDDActionPerformed

    private void jBtnCerrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBtnCerrarActionPerformed
        // TODO add your handling code here:
        CerrarBD(jCBCBDD, jBusCompleta, jTxfBusqueda, jTxfSelCol, jBtnCerrar, jBtnArchivo, jCBCColumna, jCbcMostrar, jCbcEliminar,
                jbFiltrar, jbFiltrar10);
    }//GEN-LAST:event_jBtnCerrarActionPerformed

    private void jBusCompletaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBusCompletaKeyTyped
        // TODO add your handling code here:
        Character s = evt.getKeyChar();
        if (s == KeyEvent.VK_SPACE) {
            evt.consume();
        }

        if (jBusCompleta.isEditable()) {
            if (jBusCompleta.getText().length() > 0) {
                jCBCColumna.setEnabled(false);
                jTxfBusqueda.setEditable(false);
                jbFiltrar10.setEnabled(false);
            } else {
                jCBCColumna.setEnabled(true);
                jTxfBusqueda.setEditable(true);
                jbFiltrar10.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jBusCompletaKeyTyped

    private void jTxfBusquedaKeyTyped(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxfBusquedaKeyTyped
        // TODO add your handling code here:
        Character s = evt.getKeyChar();
        if (s == KeyEvent.VK_SPACE) {
            evt.consume();
        }

        if (jTxfBusqueda.isEditable()) {
            if (jTxfBusqueda.getText().length() > 0) {
                jBusCompleta.setEditable(false);
                jbFiltrar.setEnabled(false);
            } else {
                jBusCompleta.setEditable(true);
                jbFiltrar.setEnabled(true);
            }
        }
    }//GEN-LAST:event_jTxfBusquedaKeyTyped

    private void jBusCompletaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jBusCompletaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                if (jBusCompleta.getText().isEmpty()) {
                    int i = JOptionPane.showOptionDialog(null, "¿Quieres mostrar de nuevo la tabla completa? / Do you want to show the whole table again?",
                            "Abrir Tabla / Open Table",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, iconito, opciones, opciones[0]);

                    if (i == 0) {
                        Filtro("", jTModificado, trs);
                    } else {
                    }
                } else {
                    String entrada = jBusCompleta.getText();
                    entrada = entrada.replace(",", "|");
                    Filtro(entrada, jTModificado, trs);
                    TablaSubrayada renderer = new TablaSubrayada(jBusCompleta);
                    jTModificado.setDefaultRenderer(Object.class, renderer);
                }
            } catch (Exception ms) {

            }
        }
    }//GEN-LAST:event_jBusCompletaKeyPressed

    private void jTxfBusquedaKeyPressed(java.awt.event.KeyEvent evt) {//GEN-FIRST:event_jTxfBusquedaKeyPressed
        // TODO add your handling code here:
        if (evt.getKeyCode() == KeyEvent.VK_ENTER) {
            try {
                if (jTxfBusqueda.getText().isEmpty()) {
                    int i = JOptionPane.showOptionDialog(null, "¿Quieres mostrar de nuevo la tabla completa? / Do you want to show the whole table again?",
                            "Abrir Tabla / Open Table",
                            JOptionPane.DEFAULT_OPTION, JOptionPane.QUESTION_MESSAGE, iconito, opciones, opciones[0]);

                    if (i == 0) {
                        Filtro("", jTModificado, trs);
                    } else {
                    }
                } else {
                    if (opBD1.tocados.length > 0) {
                        String entrada10 = jTxfBusqueda.getText();
                        entrada10 = entrada10.replace(",", "|");
                        Filtro(entrada10, jTModificado, trs);
                        TablaEspecial renderer10 = new TablaEspecial(jTxfBusqueda, opBD1.tocados, jTModificado);
                        jTModificado.setDefaultRenderer(Object.class, renderer10);
                    }
                }
            } catch (Exception ms) {
                JOptionPane.showMessageDialog(null, "No se ha seleccionado ninguna columna / No columns selected");
            }
        }
    }//GEN-LAST:event_jTxfBusquedaKeyPressed

    private void jTxfSelColActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jTxfSelColActionPerformed
        // TODO add your handling code here:
        opBD.setVisible(true);
        opBD.setLocationRelativeTo(null);
    }//GEN-LAST:event_jTxfSelColActionPerformed

    private void jCBCColumnaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jCBCColumnaActionPerformed
        // TODO add your handling code here:
        opBD1.setVisible(true);
        opBD1.setLocationRelativeTo(null);
    }//GEN-LAST:event_jCBCColumnaActionPerformed

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBtnArchivo;
    public javax.swing.JButton jBtnCargar;
    private javax.swing.JButton jBtnCerrar;
    private javax.swing.JTextField jBusCompleta;
    private javax.swing.JComboBox<String> jCBCBDD;
    private javax.swing.JButton jCBCColumna;
    private javax.swing.JCheckBox jCbcEliminar;
    private javax.swing.JCheckBox jCbcMostrar;
    private javax.swing.JLabel jLblBusqueda;
    private javax.swing.JLabel jLblModificado;
    private javax.swing.JLabel jLblOriginal;
    private javax.swing.JPanel jPActual;
    private javax.swing.JPanel jPArchivo;
    private javax.swing.JPanel jPBuscar;
    private javax.swing.JPanel jPCargas;
    private javax.swing.JPanel jPEloMo;
    private javax.swing.JPanel jPEspecifica;
    private javax.swing.JPanel jPOtra;
    private javax.swing.JPanel jPTablas;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    public javax.swing.JTable jTModificado;
    private javax.swing.JTable jTOriginal;
    private javax.swing.JTextField jTxfBusqueda;
    private javax.swing.JTextField jTxfResultados;
    private javax.swing.JButton jTxfSelCol;
    private javax.swing.JButton jbFiltrar;
    private javax.swing.JButton jbFiltrar10;
    // End of variables declaration//GEN-END:variables
}